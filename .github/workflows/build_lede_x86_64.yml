name: Build LEDE X86-64

on:
  push:
    branches: 
      - master
    paths:
      - '.github/workflows/build_lede.yml'
#  schedule:
#    - cron: 0 8 * * 5
#  watch:
#    types: started

env:
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: .config
  DIY_SH: diy.sh
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-latest
    if: github.event.repository.owner.id == github.event.sender.id

    steps:
    - name: Checkout
      uses: actions/checkout@master

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo swapoff /swapfile
        sudo rm -rf /swapfile /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean

    - name: Clone source code
      run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt

    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e files ] && mv files openwrt/files
        [ -e $CONFIG_FILE ] && mv $CONFIG_FILE openwrt/.config
        chmod +x $DIY_SH
        cd openwrt
        ../$DIY_SH

    - name: Download package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
    - name: Compile the firmware
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 V=s
        echo "::set-output name=status::success"

    - name: zip files
      run: |
        cd openwrt/bin/targets/x86/64
        rm -rf packages

    - name: Assemble Artifact
      run: |
          rm -rf ./artifact/
          mkdir -p ./artifact/
          mv openwrt/bin/targets/x86/64/* ./artifact/
          zip -r artifact.zip ./artifact/
          release_tag="X86-64-Lean-$(date +%Y-%m-%d)"
          echo "##[set-output name=release_tag;]$release_tag"

    - name: Create Release
      uses: actions/create-release@v1
      env:
          GITHUB_TOKEN: ${{ secrets.secret_token }}
      with:
          tag_name: ${{ steps.assemble_artifact.outputs.release_tag }}
          release_name: 自动发布 ${{ steps.assemble_artifact.outputs.release_tag }}
          draft: false
          prerelease: false
          
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
          GITHUB_TOKEN: ${{ secrets.secret_token }}
      with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: ./artifact.zip
          asset_name: ${{ steps.assemble_artifact.outputs.release_tag }}-ROM.zip
          asset_content_type: application/zip

 
